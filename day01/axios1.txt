

front-react 에 있는 rtkTodo 에서 필요없는 기능들 모두 삭제하고 (실제 백엔드에게 요청할 것이다) axios 로 만들어준 것이다

node-my 에 있는 todo 패키지 , react-my 에 있는 axios 패키지 복사해온 것이다 (프론트 패키지와 백엔드 패키지 동시에 보면서 공부할 것이다)

) axios 사용해서 백엔드에게 데이터 요청해볼 것이다

) npm i axios  -->  복사해온 것 npm install 먼저 진행해주고, axios 설치해야한다

==>  백엔드와 데이터 통신할 때 실무에서 가장 많이 쓰이는 것이 axios 이다  -->  중요하니 잘 공부하자  ***


===================================================================================================


) axios 사용법 : npm i axios

        const response = await axios.메소드( "백엔드 주소", {
                바디 데이터 작성 ...
        })

        -->  이후, 바로 response 사용하면 된다  -->  응답받은 데이터를 다시 또 json 으로 바꿔주거나 하는 과정 필요 없다


===================================================================================================


** 경로 이동 : )axiostodo  -->  signUpForm.jsx

        -->  이제는 submit 되었을 때 진짜 실제로 백엔드에 회원가입을 시켜야한다

        -->  onSubmitSignUp 함수에 async 걸어주고 작성해보자  -->  axios 를 import 받아서 사용해주자

        -->  post 로 요청하는데, 앞에서 node 만들어준 백엔드 url 주소로 요청하면 되는 것이다  -->  "http://localhost:3040/user/sign-up"

        -->  백엔드 url 은 웬만하면 다른 사름들에게 노출하면 안된다  -->  이 친구들도 .env 로 처리해주는 것이 좋다 (나중에 해볼 것이다)

        -->  axios 의 장점은 데이터 보낼 때 fetch 와 달리 JSON.stringfy 하지 않아도 된다 (응답받은 데이터를 다시 json 으로 바꾸는 과정도 필요 없다)


** 경로 이동 : axios 패키지와, 백엔드인 todo 패키지 같이 실행시켜주자  -->  npm start , npm run dev

        -->  회원가입 페이지에서 회원가입 실제로 해보자
        
        ) 백엔드에서 CORS 설정 안해줬을 때 백엔드에 데이터를 요청하면, 요청할 수 있는 대상이 아니기 때문에 CORS 오류가 뜨는 것이다
        )-->  백엔드에서 어떤 대상자들에게 요청하는 것을 허용할지를 설정해줘야한다  -->  CORS 를 설정해줘야한다
        
        -->  CORS 네트워크 오류가 뜬다  -->  백엔드주소는 어디에도 알려지면 안된다 (디도스 공격이 들어올 수 있기 때문)
                그래서 막아놓은 것이다 (이 웹사이트에 들어온 사람들에게만 허용하는 것이다  -->  백엔드가 허용한 사이트에서만 데이터 전달이 가능한 것)
                백엔드에 CORS 라고 하는 값을 수정해서 넣어줘야한다

        ) CORS 에러를 해결하는 방법 : - 프론트에서 앞에 주소에 백엔드 주소를 붙여서 보내는 방법
                                                          - 백엔드에서 CORS 를 이 주소를 허용할 것이라고 설정하는 방법 ) 이 방법으로 진행했다

        ) CORS : origin  -->  허용 범위를 정한다 (true 를 적으면 모두 다 허용  -->  사이트 배포한 url 을 적으면 된다)
                        credentials  -->  쿠키 허용 유무를 정한다

                                        
** 경로 이동 : )todo 패키지

        -->  npm i cors


** 경로 이동 : )todo  -->  app.js

        -->  cors 를 import 받아주자

        -->  app.use 로 cors 설정해주자  -->  origin 등 옵션을 넣을 수 있다

        -->  CORS 설정 마쳤으면, npm run dev 로 다시 실행시키고, 회원가입 다시 해보자

        -->  이제 에러 해결 됐다 (회원가입 되거나, 이미 존재하는 이메일 ... 등등 콘솔창에서 제대로 작동하는 것을 확인할 수 있다)


===================================================================================================


axios 에 회원가입 하는 것이 모달로 뜰 수도 있고, 페이지를 이동할 수도 있고, 로그인도 위에 있을 수도 있고, 다른 페이지로 이동할 수도 있다 ... 여러가지 상황이 나올 수 있다
로그인, 회원가입, 투두 ... 등등 모두 정해져 있지 않고 여러군데에서 할 수 있을 수도 있다  -->  이런 api 들은 모듈로 따로 빼는 것이 좋다  -->  apis 폴더 만들어주자


===================================================================================================


** 경로 이동 : )axiostodo  -->  apis  -->  base.js

        ) base.js 역할 : 백엔드 주소는 항상 일치한다  -->  쓸 때마다 백엔드 url 을 매번 입력하는 것은 힘들다  -->  기본 옵션을 추가해주는 것이다

** 경로 이동 : apis  -->  auth.api.js

        -->  여기서는 api 를 정의하면 된다


===================================================================================================


** 경로 이동 : signUpForm.jsx

        -->  AuthApi 를 import 받아서 사용해주자


===================================================================================================


) 과제 : useState 사용해서 todo 까지 다 만들어보자  -->  전역상태 안해도 되고 그냥 useState 로 하면 된다

          투두 추가한다음에 리랜더링이 일어나야하기 때문에, 그때는 그냥 fetchTodos 를 다시 한번 호출하면 된다

          todoList 에서 조회 기능 useEffect 복사해온 것
          ex)
            useEffect(() => {

                async function fetchTodos() {
                const result = await fetch("/api/todo");
                const data = await result.json();
                setTodos(data)  -->  과제 할 때 useState 로 만들어줘야 하는 상태의 set 함수이다
                }
                fetchTodos();

                -->  useEffect 안에 있는 이 코드들을 함수로 만들어서, 추가하거나 삭제 할때 이 함수를 한번 더 호출하면 된다 (리랜더링이 일어난다)

            }, []);

            -->  하지만 전역상태 관리가 안돼있으니까, 맨 끝까지 올라가야한다  -->  전역상태관리 하고 싶다면 conTextTodo 해주자 (redux 쓰지 말자)
            -->  생성, 수정, 삭제 모두 todo 데이터를 다시 호출해줘야한다  -->  모두 다 조회 기능이 따라와야한다

            -->  setTodo([...data, { newData }])  -->  이거 하면 안된다  -->  그냥 fetchTodos 를 다시 호출하라는 말이다 (이게 원래 정상이다)  ***


===================================================================================================


** 경로 이동 : src 바깥에 jsconfig.json  -->  이거 만들어주자

        ) 주의사항 : 이름 한글자도 틀리면 안된다  -->  jsconfig.json  -->  이름 이거로 만들어줘야한다  ***

        -->  뭔가 import 받을 때 "../../"  -->  이거 보기 싫어서 경로 정리해주는 것 해볼 것이다  -->  src 폴더가 경로의 기준이 되도록 만들어줄 것이다  ***

        -->  compilerOptions 에서 baseUrl 을 "src" 로 설정해주면, 이제 경로가 src 기준으로 된다

        -->  이제 import 할 때  "상대경로"  가 아니라  "src"  기준으로 하겠다는 의미이다

        -->  include 옵션도 작성해주자


** 경로 이동 : signUpForm.jsx

        -->  AuthApi 를 경로 변경한 버전으로 다시 import 받아보자  -->  import 받은 부분 확인해보자
        

===================================================================================================

