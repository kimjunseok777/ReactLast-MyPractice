

앞에서 AuthApi 사용해서 회원가입 로직 만드는 것까지 진행했었다

이제 로그인 만들고, 투두 만들고, React Query 로 넘어갈 것이다


===================================================================================================


** 경로 이동 : sign-in-form.jsx

        -->  apis 에서 auth.api.js 에서 만들어준 로그인 요청 기능 그대로 import 받아서 사용하면 된다

        -->  handlePressSignIn 함수에 fetch 로 msw 에 데이터 요청했던 것 다 지워주고, axios 로 만들어준 모듈화 기능들 사용해주자

        -->  로그인 기능이나 회원가입 기능은 JwtAuth 미들웨어가 적용되면 안된다  -->  토큰이 발급되기 전인데, 토큰이 있어야된다는 오류가 뜨게 된다


===================================================================================================


** 경로 이동 : sign-in-form.jsx

        -->  이제 토큰을 관리해볼 것이다  -->  관리하는 방법 : cookie , local storage

        ) local storage : 웹 브라우저 내에 있는 저장소  -->  개발자 모드에서 Application 에 local storage 에서 확인이 가능하다
                                    (이 공간에 key 와 value 값이 저장이 되고, 마음대로 가져다 쓸 수 있다)
                                    -->  local storage 는 웹 브라우저가 꺼져도 계속 유지가 된다  -->  ex) 웹 브라우저가 꺼져도 로그인이 계속 유지되는 경우

        ) cookie : 마찬가지로 개발자모드의 Application 의 Cookies 에서 확인이 가능하다  -->  name 과 value 로 저장한다
                         react-cookie 라는 라이브러리를 설치해야한다
                         -->  쿠키로 입력을 하게 되면 굳이 헤더에 토큰을 담지 않아도, 데이터가 알아서 전송이 된다 (쿠키가 알아서 간다)
                         -->  이 옵션이 withCredentials: true 이다 (자동으로 데이터가 전송된다  -->  token)


** 경로 이동 : base.js

        -->  withCredentials 옵션 넣어주자

        -->  토큰 저장하는 방법 익혀보자


** 경로 이동 : sign-in-form.jsx

        -->  토큰을 저장하는 요직을 만들어보자

        -->  localStorage.getItem() 입력해주자  -->  localStorage 에 저장하는 것이다 (key 와 value 가 입력이되면, 자동으로 set 이 되는 것이다)

        -->  로그인을 누르는 순간, 상단에 "000 님 반갑습니다" 라고 화면이 바껴야한다면 어떻게 해야할까?  -->  전역상태로 만들어서 관리해야한다
                하지만 상태의 치명적 단점이 있다  -->  새로고침하면 다 초기화된다  -->  토큰뿐만 아니라, 유저에 관한 정보들 모두 localStorage 에 저장해줄 것이다
                (info 정보도 함께 localStorage 에 넣어주자)

        -->  localStorage 로 유저 정보 (token, info) 를 set 했다  -->  이제 이걸 전역상태관리 해야한다  -->  contextAPI 를 사용할 것이다


** 경로 이동 : providers  -->  auth-provider.js

        -->  user 상태 만들어서 provider 만들고 전역상태 관리 만들어주자

        -->  App.js 로 가서 사용할 스코프 Provider 로 감싸주자


** 경로 이동 : sign-in-form.jsx

        -->  유저 정보 전역상태 관리로 사용해주기 위해, 전역상태 관리 useAuth 를 import 받아서 사용해주자

        -->  setUser 에 유저 info 정보를 넣어주자  -->  로그인 성공하면 유저 정보가 전역상태에 담기는 것이다

        -->  이제 헤더에다가 로그인 했을 때, 텍스트 변할 수 있게 해줄 것이다


===================================================================================================


** 경로 이동 : layouts  -->  layout.jsx

        -->  마찬가지로 전역상태고나리 useAuth 사용해주자  -->  이 전역상태는 로그인하면 유저의 정보가 담긴다  -->  setUser(info)

        -->  단순 텍스트가 바뀌는 것이 아니라, 로그아웃 버튼이 생기는 것일 수도 있다
                버튼을 누르면 setUser 랑 localStorage 에 값 모두 비워줘야되는 것이다  -->  로그아웃 만드는 것도 간단하게 작성만 해보자

        -->  이제 로그인 하면 상단에 헤더 바뀌는 것을 확인할 수 있다  -->  하지만 상태이기에 새로고침 한번이면 사라진다

        -->  Provider 로 가서 useEffect 사용해주면 재랜더링이 일어나도 로그인한 상태가 바뀌지 않게 해줄 수 있다


** 경로 이동 : providers  -->  auth-provider.js

        -->  useEffect 사용해주자

        -->  이제 로그인 후에 새로고침 해도, 로그인 정보가 상태에 유지되는 것을 확인할 수 있다  -->  로그아웃 하고 싶으면 localStorage 에 있는 값 delete 해주면 된다

        -->  여기서 localStorage 에 "user" 라는 key 값으로 여러군데 쓰이는 것을 확인할 수 있다 (getItem, setItem ... 등등 user 키값으로 여러군데 만들어줬다)

        -->  이렇게 여러군데 같은 key 값이 쓰이는 것은 관심사 분리  -->  즉, 모듈화 해주는 것이 좋다 (지금은 모듈화하지 않을 것이다)


===================================================================================================


) 내용 정리 :

        1. 웹 스토리지를 통해 유저의 정보를 저장한 이유는 무엇일까?
                -->  만약에 변수나 상태로 저장하면 새로고침이 되면 값이 삭제되기 때문
                -->  백엔드 데이터 요청할 때마다 헤더에 토큰 값을 실어줘야 하기 때문

        2. 유저의 정보를 전역상태로 저장한 이유는 무엇일까?
                -->  헤더의 레이아웃에 리랜더링을 통한 인터페이스의 변화가 있기 때문
                -->  나는 상태를 왜 사용하는가?  -->  사용자에게 인터페이스 다르게 보여주기 위해서


===================================================================================================


** 경로 이동 : 

        -->  이제 백엔드에 데이터 헤더 실어서 보내주는 것을 해볼 것이다


===================================================================================================


** 경로 이동 : 


===================================================================================================


** 경로 이동 : 


===================================================================================================